from bioscience.base import *

import math
import sys
import os
import threading
import warnings
import numpy as np
import time


###########
# Kendall #
###########
def kendall(dataset, threshold = 0.7, deviceCount = 0, mode = 1, debug = False):
    """
    Application of the Kendall correlation method.
    
    :param dataset: The dataset object to be binarized.
    :type dataset: :class:`bioscience.base.models.Dataset`
    
    :param threshold: The value for the threshold must be between 0 and 1. The default threshold is 0.7.
    :type threshold: float, optional
    
    param deviceCount: Number of GPU devices to execute
    :type deviceCount: int
    
    :param mode: Type of execution of the algorithm: `mode=1` for sequential execution, `mode=2` for parallel execution on CPUs and `mode=3` for execution on a multi-GPU architecture.
    :type mode: int
    
    :return: A CorrelationModel object that stores values generated by a correlation method.
    :rtype: :class:`bioscience.base.models.CorrelationModel`      
    """ 
    
    if threshold < 0:
        threshold = 0
    elif threshold > 1:
        threshold = 1
    
    oModel = None
    if (dataset is not None) and (0.0 <= threshold <= 1.0):
        sMode = ""
        if mode == 2: # NUMBA: CPU Parallel mode
            # To be developed
            sMode = "NUMBA - CPU Parallel mode (to be developed)"
        elif mode == 3: # NUMBA: GPU Parallel mode
            # To be developed
            sMode = "NUMBA - GPU Parallel mode (to be developed)"
        else: # Sequential mode
            oModel = __kendallSequential(dataset, threshold, debug)
            deviceCount = 0
            sMode = "CPU Sequential"
    
    return oModel

def __kendallSequential(dataset, threshold, debug):
    iRows = dataset.data.shape[0]
    iCols = dataset.data.shape[1]
    fExecutionTime = None
    
    lCombination = maxPairs = 0
    for i in range(1, iCols):
        lCombination += i
        
    for i in range(iRows):
        for j in range(i + 1, iRows):
            maxPairs += 1
    
    resultsCorrelation = np.zeros(maxPairs)    
    
    if debug == True:
        start_time = time.time()
        
    for pattern, value in enumerate(resultsCorrelation):
        
        # Get R1 and R2 from index results vector
        r1 = 0
        r2 = -1
        auxPat = pattern - iRows + 1
        
        if auxPat < 0:
            r2 = auxPat + iRows

        j = iRows - 2
        while r2 == -1:
            auxPat -= j
            r1 += 1
            if auxPat < 0:
                r2 = (j + auxPat) + (r1 + 1)
            j -= 1
        
        if r1 < iRows and r2 < iRows:
            
            # Calculation maxValue index of iCol1
            iConcordant = iDiscordant = tiersGene1 = tiersGene2 = 0
            dKendall = -1
            
            iPosMaxValue = 0
            fMaxValue = dataset.data[r1][0]
            for iCol1 in range(1, iCols):
                if fMaxValue < dataset.data[r1][iCol1]:
                    fMaxValue = dataset.data[r1][iCol1]
                    iPosMaxValue = iCol1
            
            # Calculation concordant and discordant pairs
            for iCol1 in range(iCols):
                if iCol1 != iPosMaxValue:
                    for iCol2 in range(iCols):
                        if iCol1 != iCol2 and dataset.data[r1][iCol1] < dataset.data[r1][iCol2]:
                            if dataset.data[r2][iCol2] > dataset.data[r2][iCol1]:
                                iConcordant += 1
                            if dataset.data[r2][iCol2] < dataset.data[r2][iCol1]:
                                iDiscordant += 1
            
            # Calculation tiers
            for iCol1 in range(iCols):
                for iCol2 in range(iCol1 + 1, iCols):
                    # Gene 1
                    if dataset.data[r1][iCol1] == dataset.data[r1][iCol2]:
                        tiersGene1 += 1

                    # Gene 2
                    if dataset.data[r2][iCol1] == dataset.data[r2][iCol2]:
                        tiersGene2 += 1
            
            # Calculate Kendall value
            if (lCombination - tiersGene1) * (lCombination - tiersGene2) != 0:
                dKendall = (iConcordant - iDiscordant) / math.sqrt((lCombination - tiersGene1) * (lCombination - tiersGene2))
                if dKendall < 0:
                    dKendall = dKendall * -1
                
                if dKendall < threshold:
                    dKendall = None
            else:
                dKendall = None
                        
        
        resultsCorrelation[pattern] = dKendall
    
    if debug == True:
        end_time = time.time()
        fExecutionTime = end_time - start_time
    
    oCorrelationResults = CorrelationModel(results=resultsCorrelation, executionTime=fExecutionTime)
    return oCorrelationResults
    
    